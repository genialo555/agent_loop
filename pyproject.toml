[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agent-loop"
version = "0.1.0"
description = "AI Agent Loop with VM infrastructure for autonomous task execution"
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | docs
  )/
  | example_.*
  | type_guardian_example\.py
)
'''

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.12
target-version = "py312"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["agent", "core", "inference", "plugins", "training"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "scripts.*",
    "docs.exemples.*",
    "docs.example_typed_code"
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "playwright.*",
    "httpx.*",
    "structlog.*",
    "prometheus_client.*",
    "hypothesis.*",
    "pytest_benchmark.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# Override pytest.ini with pyproject.toml format
minversion = "7.4.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--durations=10",
    "--color=yes",
    "--cov=agent",
    "--cov=core", 
    "--cov=inference",
    "--cov=plugins",
    "--cov=training",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    "--asyncio-mode=auto",
    # Parallel execution settings
    "--dist=worksteal",
    "--tx=auto",
    # Performance settings
    "--maxfail=5",
    "--timeout=300",
    # Output formatting
    "--junit-xml=pytest-results.xml",
    "--html=pytest-report.html",
    "--self-contained-html",
]
markers = [
    "slow: marks tests as slow (deselect with -m 'not slow')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "property: marks tests as property-based tests using hypothesis",
    "benchmark: marks tests as performance benchmarks",
    "ollama: marks tests that require Ollama service",
    "browser: marks tests that require browser automation",
    "gpu: marks tests that require GPU",
    "external: marks tests that require external services",
    "health: marks tests for health endpoints",
    "api: marks tests for API endpoints",
    "smoke: marks tests for smoke testing",
    "regression: marks tests for regression testing",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning", 
    "ignore::PendingDeprecationWarning",
    "ignore:.*unclosed.*:ResourceWarning",
    "ignore:.*Using or importing.*:DeprecationWarning",
    "ignore:.*aiohttp.*:DeprecationWarning",
    "ignore:.*httpx.*:DeprecationWarning",
    "ignore:.*Task was destroyed but it is pending.*:RuntimeWarning",
]
# Test discovery settings
norecursedirs = [
    ".*", 
    "build", 
    "dist", 
    "*.egg", 
    "docs", 
    "htmlcov",
    ".tox",
    ".git",
    "__pycache__",
]
# Asyncio settings
asyncio_mode = "auto"
# Timeout settings
timeout = 300
timeout_method = "thread"

[tool.coverage.run]
source = ["agent", "core", "inference", "plugins", "training"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/.tox/*",
    "*/migrations/*",
    "*/node_modules/*",
    "*/conftest.py",
    "*/setup.py",
    "*/example_*",
    "*/scripts/*",
    "*/docs/*",
    "cli.py",
]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
skip_covered = false
skip_empty = true
sort = "Cover"
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "# TYPE_CHECKING",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests", "scripts", "docs"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection in tests

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["agent", "core", "inference", "plugins", "training"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true