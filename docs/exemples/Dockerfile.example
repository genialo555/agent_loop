# Exemple de Dockerfile optimisé avec multi-stage build
# Application: API FastAPI Python avec dépendances scientifiques

# === STAGE 1: Compilation et dépendances ===
# DK002: Version explicite de l'image de base
FROM python:3.11.5-slim AS builder

# Installation des outils de build nécessaires uniquement pour cette étape
# DK006: Utilisation du cache BuildKit pour apt
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Création d'un environnement virtuel pour isoler les dépendances
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copie uniquement du fichier requirements pour tirer parti du cache
COPY requirements.txt .

# DK006: Cache BuildKit pour pip
# Installation des dépendances Python avec cache mount
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip && \
    pip install -r requirements.txt

# === STAGE 2: Image de production minimaliste ===
# DK003: Utilisation d'une image distroless pour la production
FROM gcr.io/distroless/python3-debian12:nonroot AS runtime

# DK007: Configuration Python pour les logs en temps réel
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Copie de l'environnement virtuel depuis le builder
COPY --from=builder /opt/venv /opt/venv

# Configuration du PATH pour utiliser le venv
ENV PATH="/opt/venv/bin:$PATH"

# DK004: L'image distroless:nonroot utilise déjà un utilisateur non-root (UID 65532)
# Création du répertoire de travail avec les bonnes permissions
WORKDIR /app

# Copie du code de l'application
# On copie en dernier pour maximiser l'utilisation du cache
COPY --chown=nonroot:nonroot ./app /app

# Port d'exposition (informatif uniquement)
EXPOSE 8000

# Commande de démarrage en forme vectorielle (obligatoire pour distroless)
ENTRYPOINT ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

# === STAGE 3 (optionnel): Image de développement ===
FROM python:3.11.5-slim AS development

# Installation des outils de développement
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    curl \
    vim \
    && rm -rf /var/lib/apt/lists/*

# Copie de l'environnement depuis le builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Installation des dépendances de développement
COPY requirements-dev.txt .
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install -r requirements-dev.txt

WORKDIR /app

# Mode développement avec rechargement automatique
CMD ["uvicorn", "main:app", "--reload", "--host", "0.0.0.0", "--port", "8000"]

# === STAGE 4 (optionnel): Tests ===
FROM builder AS test

# Copie du code et des tests
COPY . /app
WORKDIR /app

# Installation des dépendances de test
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install pytest pytest-cov

# Exécution des tests
RUN pytest tests/ --cov=app --cov-report=term-missing

# === Notes d'optimisation ===
# 1. L'image finale de production pèse environ 50-80MB contre 150-200MB pour une image Python standard
# 2. Aucune vulnérabilité liée au système d'exploitation (pas de shell, pas de package manager)
# 3. Build cache optimal grâce à l'ordre des instructions
# 4. Temps de rebuild < 30 secondes si seul le code change
# 5. Isolation complète entre build et runtime